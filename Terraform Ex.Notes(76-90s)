76. Terraform Output 
-------------------
terraform has the Output vaiable {}

* You can run the terraform plan again to see the old output 
* can inspect the tf.state file and see the output blocks 
Run: terraform output <output-valuable> 

This would pull updates from the output which could be an input for a script for a new file.

77. Specific versions to run the code 
----------------------------------------
Can be added to terraform{} 
-- Backend Configuration
-- Experimental features
-- Required Provider and versions 
-- Required Terraform version 
-- Pass meta data 

Terraform blocks are used for code blocks that runs on specific versions. 
Declates the latest versions of the TF plugins. 

terraform{
required_version = "1.08" 

required_providers {
  aws = {
      version = 5.7
      source = "harshicorp/aws"
  }
}
}

When we run "terraform plan" would fail, as its expecting the exact version of the terraform. Adding required_providers block can be used to declare the provider 
details and the versions. 

78. Resource TARGETTING in Terraform
-----------------------------------------
Allow the changes to a specific subset of resources rather than applying changes to the entire infrastructure. 
Use the -target ðŸš©  "<resource-name>  with terraform apply / plan command. 

terraform plan -target <>
terraform destroy -target <>
terraform init -target <>

79. DEALING with large infrastructure, when the state file is in sync
------------------------------------------------------------------------
API throttling: When we exceed the quota of number of allowed API calls. 
Single terraform plan create an enormous amount of API calls. It could impact the performance of the production instances. 

--refresh the resources while running plan 
--convert a big project to a smaller project. ec2, iam, vpc, subnet, storage, load balancers, nfs, port, policies, vnet, security group, 
-- Disable the refesh flag ðŸš©: refresh = false 


80. ZIPMAP function
--------------------
zipmap (keylist, valuelist) 

>zipmap (["a", "b"], [1, 2]) 
{
"a" =1,
"b" =2,
}





























































