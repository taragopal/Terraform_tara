
42 - 46 : Terraform Variables 

47 : Variable Definition Precedence : default vs terraform.tfvars vs ENV 
Here is the order of priority: 
  -- ENV
  -- Terraform.tfvars
  --terraform.tfvars.JSON
  -- *.auto.tfvars / *.auto.tfvars.json 
  -- Any -var / -var-file on the commands line 

48 - DATA TYPEs 

49 : LIST [] 
  Always look for the variable, some of them could only work as a list. Eg: aws_vpc_zones | aws_security_group. Even if there is only one object in the list variable. 

50 - Data type: MAP() 
  How to declare ?
  Ans - Key value pairs within curly braces: 
  Eg: {"Department" = "Marketing","Region" = "Switzerland", "Language" = "Engish"} 

Terraform init 
Terraform plans 
Terraform apply -auto-approve
Terraform destroy 

51 - Fetching Data from Maps / Lists
==========================================

resource "aws_instance" "myVM" {
ami = "aws-1234"
instance_type = var.list[1]
}

variable "list"{
type = "list" 
default = ["d1.large", "m1.medium", "s1.small"]
}

variable "types" {
type = map
default = {
 eu-central = "d1.large"
 eu-east = "m1.medium"
 eu-south = "s1.small" 
          }
}

Explain: var.list[1] will pick the 2nd item from the LIST, which is m1.medium in EU-East. 

52 - THE COUNT META Argument
============================
**By default one resource block configures one real Infrastructure Block. 
When there are 10s and 100s of resource block needs to be created with the same configuration, we could use COUNT() argument.
In the resource block mention: Count = 2 

Issue: 
1. IAM user, the name would be the same, this would pose more work for the passsword admin, to fix the IDs. So this will create only 1 user, not more, due to uniqueness restruction. 
2. Identical resource would be created with the same name. 


53 - COUNT.INDEX() 
===================
Use this under tags to change the name of the instances, users or tasks. 
This function helps to recduce the number of resource blocks. 
The name generation can be added with STRING MANUPULATION. Including a %rand%

How? 
Option1: 
tags{
  Name = "Marketing_systems-$(count.index)"
}

Result = All instances will start with Marketing_systems-1 / 2 /3 

Option2: 
variable "dev_names"{
type = list
default = ["ajay" , "anu" , "soy"]
}

resource "aws_iam_user" "lb" {
name = var.dev_names[count.index]
count = 3
}

54: Conditional Expressions
============================
Allows to choose between two values based on a condition. 
Eg: If the Env=dev, choose instance=t2.small -- if Env=test, choose instance=m5.large
* Could club more than one conditions and use &&, !=, !, "", >, <, <=,>= and other operators 


Syntax: condition? true_val: false_val

Can you NOT condition 
Example: 
variable "environment" {
  default = "production"
}

variable "region"{
  default = "eu-central-1"
}

resource "aws_instance" "example"{
instance_type = var.environment == "development" && var.region == "us-east-1" ? "t2.micro":"m5.large" 
ami = "123-aws-ayz" 
}

55 - TERRAFORM FUNCTIONS
===============================
** Terraform do not support user definied functions. 

file() - reads the contents of a file at a given PATH and returns them as a string. This function helps to reduce the size of terraform code by loading contents from external sources during terraform operations. 

policy = file("./ec2-policy.json") 


56, 57 - Analyzing Terraform Code containing Functions
=======================================================
lookup()
length()
timestamp()
fromdate()
element()

lookup()
Syntax: lookup(map, key, default)
Example: 
> lookup({a="ay", b="bee"}, "a", "what?")
ay
Explain: looking for a key-value pair in the varibale map {a="ay", b="bee"}. When finds a match it returns the value ay. If nothing found it return the DEFAULT value.

length()
========
> length([])
0
> length(["a", "b"])
2
> length({"a" = "b"})
1
> length("hello")
5

element()
=========
syntax: element(list, index)
example: 
> element(["a", "b", "c"], 1)
"b"
> element(["a", "b", "c"], -1) #last element of a list is accessed by -1 index number, -2 etc would be last -2 etc etc 
"c"

58 - LOCAL VALUES
================== 
local{
common_tags = {
    team = "it-team"
        }
}

resouce "aws_security_group" "allow_tls" {
    name = "firewall_xyz" 
    tags =  local.common_tags
}




























